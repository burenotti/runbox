name: Run Tests

on: [push]

jobs:
  check-changed-files:
    name: Check if code changed
    runs-on: ubuntu-latest
    outputs:
      run_rest_jobs: ${{steps.changed-files-specific.outputs.any_changed == 'true'}}
    steps:
      - name: Set up repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with: 
          sha: ${{ github.sha }}
          files: |
            tests/**
            runbox/**

  run-tests:
    name: Pytest
#    needs: [check-changed-files]
#    if: needs.check-changed-files.outputs.run_rest_jobs == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Set up repository
        uses: actions/checkout@v3 
      - name: Set up Python ${{ matrix.python-version }}
        
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl gnupg lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin jq
      - name: Setup sandbox images
        run: |
          docker build -t sandbox:python-3.10 ./tests/images/Python3.10
          docker build -t sandbox:gcc-10 ./tests/images/gcc10
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: false
          virtualenvs-in-project: false
          virtualenvs-path: ~/my-custom-path
          installer-parallel: true
      - name: Install dependencies
        run: poetry install
      - name: Run tests with pytest
        run: pytest ./tests/ -vv
      - name: Run Coverage
        run: |
          coverage run --source=runbox --module pytest --verbose .
          coverage json
          cat coverage.json | jq -r ".totals.percent_covered_display" >> $GITHUB_ENV
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 5bc85bcd4f4ea44d4a8d329d51a1310d
          filename: .json
          label: Coverage
          message: ${{ env.COVERAGE }}
          valColorRange: ${{ env.COVERAGE }}
          minColorRange: 0
          maxColorRange: 100